syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_create_user.proto";
import "rpc_login_user.proto";
import "rpc_update_user.proto";
import "rpc_create_game.proto";
import "rpc_invite_player_to_game.proto";
import "rpc_accept_game_invite.proto";
// import "rpc_add_player_to_game.proto";
import "rpc_list_game_players.proto";
import "rpc_get_player_game.proto";
import "rpc_start_game.proto";
import "rpc_get_player_hand.proto";
import "rpc_play_dessert.proto";
import "rpc_draw_card.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/PlatosCodes/desserted/backend/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Desserted API";
    version: "1.0";
    contact: {
      name: "Alex Merola";
      url: "https://github.com/PlatosCodes";
      email: "codingplato@gmail.com";
    };
  };
};

service Desserted {
      // Creates a new user
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {    
            post: "/v1/create_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to create a new user";
          summary: "Create new user";
        };
    };
    // Logs in a user
    rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
        option (google.api.http) = {    
            post: "/v1/login_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to login a user";
          summary: "Login a user";
        };
    };
    // Updates a user's password
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
      option (google.api.http) = {    
          patch: "/v1/update_user"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to update a user";
        summary: "Update a user";
      };
    };
    rpc CreateGame (CreateGameRequest) returns (CreateGameResponse) {
      option (google.api.http) = {    
          post: "/v1/create_game"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to create a new game";
        summary: "Create new game";
      };
    };
    rpc InvitePlayerToGame (InvitePlayerToGameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {    
          post: "/v1/invite_player_to_game"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to invite a player to the game";
        summary: "Invite player to the game";
      };
    };   
    rpc AcceptGameInvite (AcceptGameInviteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {    
          post: "/v1/accept_game_invite"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to accept an invitation to a game";
        summary: "Accept invite the game";
      };
    };   
    // rpc AddPlayerToGame (AddPlayerToGameRequest) returns (google.protobuf.Empty) {
    //   option (google.api.http) = {    
    //       post: "/v1/add_player_to_game"
    //       body: "*"
    //   };
    //   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //     description: "Use this API to add player to the game";
    //     summary: "Add player to the game";
    //   };
    // };   
    rpc ListGamePlayers (ListGamePlayersRequest) returns (ListGamePlayersResponse) {
      option (google.api.http) = {    
          get: "/v1/list_game_players"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to list the players of the game";
        summary: "List the game's players";
      };
    };      
    rpc GetPlayerGame (GetPlayerGameRequest) returns (GetPlayerGameResponse) {
      option (google.api.http) = {    
          get: "/v1/get_player_game/{player_game_id}"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to get data for a player's game";
        summary: "Get the player's game data";
      };
    };      
    rpc StartGame (StartGameRequest) returns (StartGameResponse) {
      option (google.api.http) = {    
          post: "/v1/start_game"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to start a game";
        summary: "Start the game";
      };
    };   
    rpc GetPlayerHand (GetPlayerHandRequest) returns (GetPlayerHandResponse) {
      option (google.api.http) = {    
          get: "/v1/get_player_hand"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to get a player's hand";
        summary: "Get the player's hand";
      };
    };
    rpc PlayDessert (PlayDessertRequest) returns (PlayDessertResponse) {
      option (google.api.http) = {    
          post: "/v1/play_dessert"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to play a dessert";
        summary: "Play a dessert";
      };
    };
    rpc DrawCard (DrawCardRequest) returns (DrawCardResponse) {
      option (google.api.http) = {    
          post: "/v1/draw_card"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to draw a card";
        summary: "Draw a card";
      };
    };
}