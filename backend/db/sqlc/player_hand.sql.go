// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: player_hand.sql

package db

import (
	"context"
)

const addCardToPlayerHand = `-- name: AddCardToPlayerHand :exec
INSERT INTO player_hand (player_game_id, card_id) 
VALUES ($1, $2)
`

type AddCardToPlayerHandParams struct {
	PlayerGameID int64 `json:"player_game_id"`
	CardID       int64 `json:"card_id"`
}

func (q *Queries) AddCardToPlayerHand(ctx context.Context, arg AddCardToPlayerHandParams) error {
	_, err := q.db.ExecContext(ctx, addCardToPlayerHand, arg.PlayerGameID, arg.CardID)
	return err
}

const getPlayedCards = `-- name: GetPlayedCards :many
SELECT played_card_id, player_game_id, card_id, play_time FROM played_cards
WHERE player_game_id = $1
`

func (q *Queries) GetPlayedCards(ctx context.Context, playerGameID int64) ([]PlayedCard, error) {
	rows, err := q.db.QueryContext(ctx, getPlayedCards, playerGameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlayedCard{}
	for rows.Next() {
		var i PlayedCard
		if err := rows.Scan(
			&i.PlayedCardID,
			&i.PlayerGameID,
			&i.CardID,
			&i.PlayTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerHand = `-- name: GetPlayerHand :many
SELECT player_hand.player_hand_id, player_hand.player_game_id, player_hand.card_id, cards.name
FROM player_hand 
JOIN cards ON player_hand.card_id = cards.card_id
WHERE player_hand.player_game_id = $1
`

type GetPlayerHandRow struct {
	PlayerHandID int64  `json:"player_hand_id"`
	PlayerGameID int64  `json:"player_game_id"`
	CardID       int64  `json:"card_id"`
	Name         string `json:"name"`
}

func (q *Queries) GetPlayerHand(ctx context.Context, playerGameID int64) ([]GetPlayerHandRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlayerHand, playerGameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPlayerHandRow{}
	for rows.Next() {
		var i GetPlayerHandRow
		if err := rows.Scan(
			&i.PlayerHandID,
			&i.PlayerGameID,
			&i.CardID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isCardInPlayerHand = `-- name: IsCardInPlayerHand :one
SELECT EXISTS (
  SELECT 1 FROM player_hand
  WHERE player_game_id = $1 and card_id = $2
) AS in_hand
`

type IsCardInPlayerHandParams struct {
	PlayerGameID int64 `json:"player_game_id"`
	CardID       int64 `json:"card_id"`
}

func (q *Queries) IsCardInPlayerHand(ctx context.Context, arg IsCardInPlayerHandParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isCardInPlayerHand, arg.PlayerGameID, arg.CardID)
	var in_hand bool
	err := row.Scan(&in_hand)
	return in_hand, err
}

const recordPlayedCard = `-- name: RecordPlayedCard :exec
INSERT INTO played_cards (player_game_id, card_id) 
VALUES ($1, $2)
`

type RecordPlayedCardParams struct {
	PlayerGameID int64 `json:"player_game_id"`
	CardID       int64 `json:"card_id"`
}

func (q *Queries) RecordPlayedCard(ctx context.Context, arg RecordPlayedCardParams) error {
	_, err := q.db.ExecContext(ctx, recordPlayedCard, arg.PlayerGameID, arg.CardID)
	return err
}

const removeCardFromPlayerHand = `-- name: RemoveCardFromPlayerHand :exec
DELETE FROM player_hand 
WHERE player_game_id = $1 and card_id = $2
`

type RemoveCardFromPlayerHandParams struct {
	PlayerGameID int64 `json:"player_game_id"`
	CardID       int64 `json:"card_id"`
}

func (q *Queries) RemoveCardFromPlayerHand(ctx context.Context, arg RemoveCardFromPlayerHandParams) error {
	_, err := q.db.ExecContext(ctx, removeCardFromPlayerHand, arg.PlayerGameID, arg.CardID)
	return err
}
