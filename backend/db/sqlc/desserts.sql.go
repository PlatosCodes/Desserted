// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: desserts.sql

package db

import (
	"context"
	"database/sql"
)

const getDessertsPlayedByPlayer = `-- name: GetDessertsPlayedByPlayer :many
SELECT dessert_id, icon_path FROM dessert_played WHERE player_game_id = $1
`

type GetDessertsPlayedByPlayerRow struct {
	DessertID int32          `json:"dessert_id"`
	IconPath  sql.NullString `json:"icon_path"`
}

func (q *Queries) GetDessertsPlayedByPlayer(ctx context.Context, playerGameID int32) ([]GetDessertsPlayedByPlayerRow, error) {
	rows, err := q.db.QueryContext(ctx, getDessertsPlayedByPlayer, playerGameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDessertsPlayedByPlayerRow{}
	for rows.Next() {
		var i GetDessertsPlayedByPlayerRow
		if err := rows.Scan(&i.DessertID, &i.IconPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordDessertPlayed = `-- name: RecordDessertPlayed :exec
INSERT INTO dessert_played (player_game_id, dessert_id, icon_path, timestamp) 
VALUES ($1, $2, $3, NOW())
`

type RecordDessertPlayedParams struct {
	PlayerGameID int32          `json:"player_game_id"`
	DessertID    int32          `json:"dessert_id"`
	IconPath     sql.NullString `json:"icon_path"`
}

func (q *Queries) RecordDessertPlayed(ctx context.Context, arg RecordDessertPlayedParams) error {
	_, err := q.db.ExecContext(ctx, recordDessertPlayed, arg.PlayerGameID, arg.DessertID, arg.IconPath)
	return err
}
