// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: invitation.sql

package db

import (
	"context"
)

const acceptGameInvitation = `-- name: AcceptGameInvitation :exec
INSERT INTO player_game (player_id, game_id)
SELECT users.id, game_invitations.game_id
FROM users
INNER JOIN game_invitations ON users.username = game_invitations.invitee_username
WHERE users.username = $1 AND game_invitations.game_id = $2
`

type AcceptGameInvitationParams struct {
	Username string `json:"username"`
	GameID   int64  `json:"game_id"`
}

func (q *Queries) AcceptGameInvitation(ctx context.Context, arg AcceptGameInvitationParams) error {
	_, err := q.db.ExecContext(ctx, acceptGameInvitation, arg.Username, arg.GameID)
	return err
}

const createGameInvitation = `-- name: CreateGameInvitation :exec
INSERT INTO game_invitations (inviter_player_id, invitee_username, game_id)
VALUES ($1, $2, $3)
`

type CreateGameInvitationParams struct {
	InviterPlayerID int64  `json:"inviter_player_id"`
	InviteeUsername string `json:"invitee_username"`
	GameID          int64  `json:"game_id"`
}

func (q *Queries) CreateGameInvitation(ctx context.Context, arg CreateGameInvitationParams) error {
	_, err := q.db.ExecContext(ctx, createGameInvitation, arg.InviterPlayerID, arg.InviteeUsername, arg.GameID)
	return err
}

const deleteGameInvitation = `-- name: DeleteGameInvitation :exec
DELETE FROM game_invitations
WHERE invitee_username = $1 AND game_id = $2
`

type DeleteGameInvitationParams struct {
	InviteeUsername string `json:"invitee_username"`
	GameID          int64  `json:"game_id"`
}

func (q *Queries) DeleteGameInvitation(ctx context.Context, arg DeleteGameInvitationParams) error {
	_, err := q.db.ExecContext(ctx, deleteGameInvitation, arg.InviteeUsername, arg.GameID)
	return err
}

const doesInvitationExist = `-- name: DoesInvitationExist :one
SELECT EXISTS (
    SELECT 1 FROM game_invitations
    WHERE invitee_username = $1 AND game_id = $2
) AS exists
`

type DoesInvitationExistParams struct {
	InviteeUsername string `json:"invitee_username"`
	GameID          int64  `json:"game_id"`
}

func (q *Queries) DoesInvitationExist(ctx context.Context, arg DoesInvitationExistParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, doesInvitationExist, arg.InviteeUsername, arg.GameID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserGameCreator = `-- name: IsUserGameCreator :one
SELECT EXISTS (
  SELECT 1 FROM games
  WHERE created_by = $1 AND game_id = $2
) AS is_creator
`

type IsUserGameCreatorParams struct {
	CreatedBy int64 `json:"created_by"`
	GameID    int64 `json:"game_id"`
}

func (q *Queries) IsUserGameCreator(ctx context.Context, arg IsUserGameCreatorParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserGameCreator, arg.CreatedBy, arg.GameID)
	var is_creator bool
	err := row.Scan(&is_creator)
	return is_creator, err
}

const listGameInvitationsForUser = `-- name: ListGameInvitationsForUser :many
SELECT game_invitation_id, inviter_player_id, invitee_username, game_id, timestamp FROM game_invitations
WHERE invitee_username = $1
`

func (q *Queries) ListGameInvitationsForUser(ctx context.Context, inviteeUsername string) ([]GameInvitation, error) {
	rows, err := q.db.QueryContext(ctx, listGameInvitationsForUser, inviteeUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GameInvitation{}
	for rows.Next() {
		var i GameInvitation
		if err := rows.Scan(
			&i.GameInvitationID,
			&i.InviterPlayerID,
			&i.InviteeUsername,
			&i.GameID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
