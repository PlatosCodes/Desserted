// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: game.sql

package db

import (
	"context"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (created_by) 
VALUES ($1) 
RETURNING game_id, status, created_by, start_time, end_time
`

func (q *Queries) CreateGame(ctx context.Context, createdBy int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame, createdBy)
	var i Game
	err := row.Scan(
		&i.GameID,
		&i.Status,
		&i.CreatedBy,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const endGame = `-- name: EndGame :exec
UPDATE games SET end_time = NOW() 
WHERE game_id = $1
`

func (q *Queries) EndGame(ctx context.Context, gameID int32) error {
	_, err := q.db.ExecContext(ctx, endGame, gameID)
	return err
}

const getGameByID = `-- name: GetGameByID :one
SELECT game_id, status, created_by, start_time, end_time FROM games 
WHERE game_id = $1
`

func (q *Queries) GetGameByID(ctx context.Context, gameID int32) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameByID, gameID)
	var i Game
	err := row.Scan(
		&i.GameID,
		&i.Status,
		&i.CreatedBy,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const listActiveGames = `-- name: ListActiveGames :many
SELECT game_id, status, created_by, start_time, end_time FROM games 
WHERE status = 'active' 
LIMIT $1 OFFSET $2
`

type ListActiveGamesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActiveGames(ctx context.Context, arg ListActiveGamesParams) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listActiveGames, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Game{}
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.GameID,
			&i.Status,
			&i.CreatedBy,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGameStatus = `-- name: UpdateGameStatus :exec
UPDATE games SET status = $1 
WHERE game_id = $2
`

type UpdateGameStatusParams struct {
	Status string `json:"status"`
	GameID int32  `json:"game_id"`
}

func (q *Queries) UpdateGameStatus(ctx context.Context, arg UpdateGameStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateGameStatus, arg.Status, arg.GameID)
	return err
}
