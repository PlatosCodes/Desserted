// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: game.sql

package db

import (
	"context"
	"database/sql"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (created_by)
VALUES ($1)
RETURNING id, status, created_by, created_at, ended_at
`

// Create a new game session
func (q *Queries) CreateGame(ctx context.Context, createdBy int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame, createdBy)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}

const drawCard = `-- name: DrawCard :one
SELECT id, type, name FROM cards
ORDER BY RANDOM()
LIMIT 1
`

// Draw a card
func (q *Queries) DrawCard(ctx context.Context) (Card, error) {
	row := q.db.QueryRowContext(ctx, drawCard)
	var i Card
	err := row.Scan(&i.ID, &i.Type, &i.Name)
	return i, err
}

const endGame = `-- name: EndGame :exec
UPDATE games 
SET status = 'complete', ended_at = NOW() 
WHERE id = $1
`

// End game
func (q *Queries) EndGame(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, endGame, id)
	return err
}

const getGameByID = `-- name: GetGameByID :one
SELECT id, status, created_by, created_at, ended_at FROM games WHERE id = $1
`

// Get game session by ID
func (q *Queries) GetGameByID(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameByID, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}

const playDessert = `-- name: PlayDessert :exec
UPDATE players 
SET played_cards = array_append(played_cards, $1) 
WHERE user_id = $2 AND game_id = $3
`

type PlayDessertParams struct {
	ArrayAppend interface{}   `json:"array_append"`
	UserID      sql.NullInt64 `json:"user_id"`
	GameID      sql.NullInt64 `json:"game_id"`
}

// Play a dessert
func (q *Queries) PlayDessert(ctx context.Context, arg PlayDessertParams) error {
	_, err := q.db.ExecContext(ctx, playDessert, arg.ArrayAppend, arg.UserID, arg.GameID)
	return err
}
