// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: game_deck.sql

package db

import (
	"context"
)

const drawTopCard = `-- name: DrawTopCard :one
SELECT card_id FROM game_deck
WHERE game_id = $1
ORDER BY order_index ASC
LIMIT 1
`

func (q *Queries) DrawTopCard(ctx context.Context, gameID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, drawTopCard, gameID)
	var card_id int64
	err := row.Scan(&card_id)
	return card_id, err
}

const getGameDeck = `-- name: GetGameDeck :one
SELECT game_deck_id, game_id, card_id, order_index from game_deck
WHERE game_id = $1
`

func (q *Queries) GetGameDeck(ctx context.Context, gameID int64) (GameDeck, error) {
	row := q.db.QueryRowContext(ctx, getGameDeck, gameID)
	var i GameDeck
	err := row.Scan(
		&i.GameDeckID,
		&i.GameID,
		&i.CardID,
		&i.OrderIndex,
	)
	return i, err
}

const insertIntoGameDeck = `-- name: InsertIntoGameDeck :one
INSERT INTO game_deck (game_id, card_id, order_index) 
VALUES ($1, $2, $3)
RETURNING game_deck_id
`

type InsertIntoGameDeckParams struct {
	GameID     int64 `json:"game_id"`
	CardID     int64 `json:"card_id"`
	OrderIndex int32 `json:"order_index"`
}

func (q *Queries) InsertIntoGameDeck(ctx context.Context, arg InsertIntoGameDeckParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertIntoGameDeck, arg.GameID, arg.CardID, arg.OrderIndex)
	var game_deck_id int64
	err := row.Scan(&game_deck_id)
	return game_deck_id, err
}

const isDeckEmpty = `-- name: IsDeckEmpty :one
SELECT NOT EXISTS (
  SELECT 1 FROM game_deck
  WHERE game_id = $1
) AS is_empty
`

func (q *Queries) IsDeckEmpty(ctx context.Context, gameID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isDeckEmpty, gameID)
	var is_empty bool
	err := row.Scan(&is_empty)
	return is_empty, err
}

const removeCardFromDeck = `-- name: RemoveCardFromDeck :exec
DELETE FROM game_deck
WHERE game_id = $1 and card_id = $2
`

type RemoveCardFromDeckParams struct {
	GameID int64 `json:"game_id"`
	CardID int64 `json:"card_id"`
}

func (q *Queries) RemoveCardFromDeck(ctx context.Context, arg RemoveCardFromDeckParams) error {
	_, err := q.db.ExecContext(ctx, removeCardFromDeck, arg.GameID, arg.CardID)
	return err
}
