// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: player_game.sql

package db

import (
	"context"
	"database/sql"
)

const addPlayerToGame = `-- name: AddPlayerToGame :exec
INSERT INTO player_game (player_id, game_id) 
VALUES ($1, $2)
`

type AddPlayerToGameParams struct {
	PlayerID int64 `json:"player_id"`
	GameID   int64 `json:"game_id"`
}

func (q *Queries) AddPlayerToGame(ctx context.Context, arg AddPlayerToGameParams) error {
	_, err := q.db.ExecContext(ctx, addPlayerToGame, arg.PlayerID, arg.GameID)
	return err
}

const checkWinCondition = `-- name: CheckWinCondition :one
SELECT player_id, player_score FROM player_game 
WHERE player_game_id = $1 AND player_score >= $2
`

type CheckWinConditionParams struct {
	PlayerGameID int64         `json:"player_game_id"`
	PlayerScore  sql.NullInt64 `json:"player_score"`
}

type CheckWinConditionRow struct {
	PlayerID    int64         `json:"player_id"`
	PlayerScore sql.NullInt64 `json:"player_score"`
}

// Check if a player has reached the winning condition
func (q *Queries) CheckWinCondition(ctx context.Context, arg CheckWinConditionParams) (CheckWinConditionRow, error) {
	row := q.db.QueryRowContext(ctx, checkWinCondition, arg.PlayerGameID, arg.PlayerScore)
	var i CheckWinConditionRow
	err := row.Scan(&i.PlayerID, &i.PlayerScore)
	return i, err
}

const getPlayerGame = `-- name: GetPlayerGame :one
SELECT player_game_id, player_id, game_id, player_score, player_status, hand_cards, played_cards FROM player_game 
WHERE player_game_id = $1
`

func (q *Queries) GetPlayerGame(ctx context.Context, playerGameID int64) (PlayerGame, error) {
	row := q.db.QueryRowContext(ctx, getPlayerGame, playerGameID)
	var i PlayerGame
	err := row.Scan(
		&i.PlayerGameID,
		&i.PlayerID,
		&i.GameID,
		&i.PlayerScore,
		&i.PlayerStatus,
		&i.HandCards,
		&i.PlayedCards,
	)
	return i, err
}

const listPlayerGames = `-- name: ListPlayerGames :many
SELECT player_game_id, player_id, game_id, player_score, player_status, hand_cards, played_cards FROM player_game 
WHERE player_id = $1
`

func (q *Queries) ListPlayerGames(ctx context.Context, playerID int64) ([]PlayerGame, error) {
	rows, err := q.db.QueryContext(ctx, listPlayerGames, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlayerGame{}
	for rows.Next() {
		var i PlayerGame
		if err := rows.Scan(
			&i.PlayerGameID,
			&i.PlayerID,
			&i.GameID,
			&i.PlayerScore,
			&i.PlayerStatus,
			&i.HandCards,
			&i.PlayedCards,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayerGame = `-- name: UpdatePlayerGame :exec
UPDATE player_game 
SET player_score = $1, player_status = $2 
WHERE player_game_id = $3
`

type UpdatePlayerGameParams struct {
	PlayerScore  sql.NullInt64  `json:"player_score"`
	PlayerStatus sql.NullString `json:"player_status"`
	PlayerGameID int64          `json:"player_game_id"`
}

func (q *Queries) UpdatePlayerGame(ctx context.Context, arg UpdatePlayerGameParams) error {
	_, err := q.db.ExecContext(ctx, updatePlayerGame, arg.PlayerScore, arg.PlayerStatus, arg.PlayerGameID)
	return err
}
