// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: friend.sql

package db

import (
	"context"
)

const createFriendship = `-- name: CreateFriendship :one
INSERT INTO friends (friender_id, friendee_id) 
SELECT $1, $2
WHERE EXISTS (
  SELECT 1 FROM users WHERE id = $1
) AND EXISTS (
  SELECT 1 FROM users WHERE id = $2
)
RETURNING friendship_id, friender_id, friendee_id, friended_at
`

type CreateFriendshipParams struct {
	FrienderID int64 `json:"friender_id"`
	FriendeeID int64 `json:"friendee_id"`
}

func (q *Queries) CreateFriendship(ctx context.Context, arg CreateFriendshipParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, createFriendship, arg.FrienderID, arg.FriendeeID)
	var i Friend
	err := row.Scan(
		&i.FriendshipID,
		&i.FrienderID,
		&i.FriendeeID,
		&i.FriendedAt,
	)
	return i, err
}

const deleteFriendship = `-- name: DeleteFriendship :exec
DELETE from friends WHERE friendship_id = $1
`

func (q *Queries) DeleteFriendship(ctx context.Context, friendshipID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFriendship, friendshipID)
	return err
}

const getFriendshipByID = `-- name: GetFriendshipByID :one
SELECT friendship_id, friender_id, friendee_id, friended_at FROM friends
WHERE friendship_id = $1 LIMIT 1
`

func (q *Queries) GetFriendshipByID(ctx context.Context, friendshipID int64) (Friend, error) {
	row := q.db.QueryRowContext(ctx, getFriendshipByID, friendshipID)
	var i Friend
	err := row.Scan(
		&i.FriendshipID,
		&i.FrienderID,
		&i.FriendeeID,
		&i.FriendedAt,
	)
	return i, err
}

const listUserFriends = `-- name: ListUserFriends :many
SELECT friendship_id, friender_id, friendee_id, friended_at FROM friends
WHERE friender_id = $1 OR friendee_id = $1
ORDER BY friended_at
LIMIT $2
OFFSET $3
`

type ListUserFriendsParams struct {
	FrienderID int64 `json:"friender_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListUserFriends(ctx context.Context, arg ListUserFriendsParams) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, listUserFriends, arg.FrienderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.FriendshipID,
			&i.FrienderID,
			&i.FriendeeID,
			&i.FriendedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
