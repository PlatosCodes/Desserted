// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: friend.sql

package db

import (
	"context"
	"time"
)

const acceptFriendRequest = `-- name: AcceptFriendRequest :exec
UPDATE friends
SET status = 'accepted', accepted_at = NOW()
WHERE friendee_id = $1 and friendship_id = $2 AND status = 'pending'
`

type AcceptFriendRequestParams struct {
	FriendeeID   int64 `json:"friendee_id"`
	FriendshipID int64 `json:"friendship_id"`
}

func (q *Queries) AcceptFriendRequest(ctx context.Context, arg AcceptFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, acceptFriendRequest, arg.FriendeeID, arg.FriendshipID)
	return err
}

const createFriendship = `-- name: CreateFriendship :one
INSERT INTO friends (friender_id, friendee_id)
SELECT $1, users.id
FROM users
WHERE users.username = $2 AND NOT EXISTS (
    SELECT 1 FROM friends
    WHERE friender_id = $1 AND friendee_id = users.id
)
RETURNING friendship_id, friender_id, friendee_id, status, friended_at, accepted_at
`

type CreateFriendshipParams struct {
	FrienderID int64  `json:"friender_id"`
	Username   string `json:"username"`
}

func (q *Queries) CreateFriendship(ctx context.Context, arg CreateFriendshipParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, createFriendship, arg.FrienderID, arg.Username)
	var i Friend
	err := row.Scan(
		&i.FriendshipID,
		&i.FrienderID,
		&i.FriendeeID,
		&i.Status,
		&i.FriendedAt,
		&i.AcceptedAt,
	)
	return i, err
}

const deleteFriendship = `-- name: DeleteFriendship :exec
DELETE from friends WHERE friendship_id = $1
`

func (q *Queries) DeleteFriendship(ctx context.Context, friendshipID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFriendship, friendshipID)
	return err
}

const getFriendshipByID = `-- name: GetFriendshipByID :one
SELECT friendship_id, friender_id, friendee_id, status, friended_at, accepted_at FROM friends
WHERE friendship_id = $1 LIMIT 1
`

func (q *Queries) GetFriendshipByID(ctx context.Context, friendshipID int64) (Friend, error) {
	row := q.db.QueryRowContext(ctx, getFriendshipByID, friendshipID)
	var i Friend
	err := row.Scan(
		&i.FriendshipID,
		&i.FrienderID,
		&i.FriendeeID,
		&i.Status,
		&i.FriendedAt,
		&i.AcceptedAt,
	)
	return i, err
}

const listPendingFriendRequests = `-- name: ListPendingFriendRequests :many
SELECT users.id, users.username, friends.friendship_id, friends.friended_at
FROM friends
JOIN users ON friends.friender_id = users.id
WHERE friends.friendee_id = $1 AND friends.status = 'pending'
`

type ListPendingFriendRequestsRow struct {
	ID           int64     `json:"id"`
	Username     string    `json:"username"`
	FriendshipID int64     `json:"friendship_id"`
	FriendedAt   time.Time `json:"friended_at"`
}

func (q *Queries) ListPendingFriendRequests(ctx context.Context, friendeeID int64) ([]ListPendingFriendRequestsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPendingFriendRequests, friendeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPendingFriendRequestsRow{}
	for rows.Next() {
		var i ListPendingFriendRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FriendshipID,
			&i.FriendedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserFriends = `-- name: ListUserFriends :many
SELECT friendship_id, friender_id, friendee_id, status, friended_at, accepted_at FROM friends
WHERE (friender_id = $1 OR friendee_id = $1) AND status = 'accepted'
ORDER BY friended_at
LIMIT $2
OFFSET $3
`

type ListUserFriendsParams struct {
	FrienderID int64 `json:"friender_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListUserFriends(ctx context.Context, arg ListUserFriendsParams) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, listUserFriends, arg.FrienderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.FriendshipID,
			&i.FrienderID,
			&i.FriendeeID,
			&i.Status,
			&i.FriendedAt,
			&i.AcceptedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
