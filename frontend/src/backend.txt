Ok excellent. Here is my updated codebase. I'd like you to again extends the functionality of my frontend to be more complete in regards to the functionality of my backend. In particular, I need updated src/views/. 

{
  "swagger": "2.0",
  "info": {
    "title": "Desserted API",
    "version": "1.0",
    "contact": {
      "name": "Alex Merola",
      "url": "https://github.com/PlatosCodes",
      "email": "codingplato@gmail.com"
    }
  },
  "tags": [
    {
      "name": "Desserted"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/accept_friend_request": {
      "post": {
        "summary": "Accept a friend request",
        "description": "Use this API to accept a friend request",
        "operationId": "Desserted_AcceptFriendRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbAcceptFriendRequestRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/accept_game_invite": {
      "post": {
        "summary": "Accept invite the game",
        "description": "Use this API to accept an invitation to a game",
        "operationId": "Desserted_AcceptGameInvite",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbAcceptGameInviteRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/check_session": {
      "post": {
        "summary": "Check user session",
        "description": "Use this API to check session for a user",
        "operationId": "Desserted_CheckUserSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCheckUserSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbCheckUserSessionRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/create_friendship": {
      "post": {
        "summary": "Create new friendship",
        "description": "Use this API to create a new friendship",
        "operationId": "Desserted_CreateFriendship",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCreateFriendshipResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbCreateFriendshipRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/create_game": {
      "post": {
        "summary": "Create new game",
        "description": "Use this API to create a new game",
        "operationId": "Desserted_CreateGame",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCreateGameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbCreateGameRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/create_user": {
      "post": {
        "summary": "Create new user",
        "description": "Use this API to create a new user",
        "operationId": "Desserted_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbCreateUserRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/draw_card": {
      "post": {
        "summary": "Draw a card",
        "description": "Use this API to draw a card",
        "operationId": "Desserted_DrawCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbDrawCardResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbDrawCardRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/get_player_game/{playerGameId}": {
      "get": {
        "summary": "Get the player's game data",
        "description": "Use this API to get data for a player's game",
        "operationId": "Desserted_GetPlayerGame",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetPlayerGameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "playerGameId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/get_player_hand": {
      "get": {
        "summary": "Get the player's hand",
        "description": "Use this API to get a player's hand",
        "operationId": "Desserted_GetPlayerHand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetPlayerHandResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "playerGameId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/invite_player_to_game": {
      "post": {
        "summary": "Invite player to the game",
        "description": "Use this API to invite a player to the game",
        "operationId": "Desserted_InvitePlayerToGame",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbInvitePlayerToGameRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/list_friend_requests/{userId}": {
      "get": {
        "summary": "List a user's friend requests",
        "description": "Use this API to list a user's pending friend requests",
        "operationId": "Desserted_ListFriendRequests",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbListFriendRequestsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/list_game_players": {
      "get": {
        "summary": "List the game's players",
        "description": "Use this API to list the players of the game",
        "operationId": "Desserted_ListGamePlayers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbListGamePlayersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "gameId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/list_user_friends": {
      "post": {
        "summary": "List a user's friends",
        "description": "Use this API to list a user's friends",
        "operationId": "Desserted_ListUserFriends",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbListUserFriendsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbListUserFriendsRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/login_user": {
      "post": {
        "summary": "Login a user",
        "description": "Use this API to login a user",
        "operationId": "Desserted_LoginUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbLoginUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbLoginUserRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/logout": {
      "post": {
        "summary": "Logout a user",
        "description": "Use this API to logout a user",
        "operationId": "Desserted_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbLogoutRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/play_dessert": {
      "post": {
        "summary": "Play a dessert",
        "description": "Use this API to play a dessert",
        "operationId": "Desserted_PlayDessert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbPlayDessertResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbPlayDessertRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/start_game": {
      "post": {
        "summary": "Start the game",
        "description": "Use this API to start a game",
        "operationId": "Desserted_StartGame",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbStartGameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbStartGameRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    },
    "/v1/update_user": {
      "patch": {
        "summary": "Update a user",
        "description": "Use this API to update a user",
        "operationId": "Desserted_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbUpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbUpdateUserRequest"
            }
          }
        ],
        "tags": [
          "Desserted"
        ]
      }
    }
  },
  "definitions": {
    "pbAcceptFriendRequestRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64",
          "title": "ID of the user accepting the request"
        },
        "friendshipId": {
          "type": "string",
          "format": "int64",
          "title": "ID of the friendship to accept"
        }
      }
    },
    "pbAcceptGameInviteRequest": {
      "type": "object",
      "properties": {
        "inviteeUsername": {
          "type": "string"
        },
        "gameId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pbCheckUserSessionRequest": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        }
      }
    },
    "pbCheckUserSessionResponse": {
      "type": "object",
      "properties": {
        "isAuthenticated": {
          "type": "boolean"
        }
      }
    },
    "pbCreateFriendshipRequest": {
      "type": "object",
      "properties": {
        "frienderId": {
          "type": "string",
          "format": "int64"
        },
        "friendeeUsername": {
          "type": "string"
        }
      }
    },
    "pbCreateFriendshipResponse": {
      "type": "object",
      "properties": {
        "friendship": {
          "$ref": "#/definitions/pbFriend"
        }
      }
    },
    "pbCreateGameRequest": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pbCreateGameResponse": {
      "type": "object",
      "properties": {
        "game": {
          "$ref": "#/definitions/pbGame"
        }
      }
    },
    "pbCreateUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "pbCreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/pbUser"
        }
      }
    },
    "pbDrawCardRequest": {
      "type": "object",
      "properties": {
        "gameId": {
          "type": "string",
          "format": "int64"
        },
        "playerGameId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pbDrawCardResponse": {
      "type": "object",
      "properties": {
        "cardId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pbFriend": {
      "type": "object",
      "properties": {
        "friendshipId": {
          "type": "string",
          "format": "int64"
        },
        "frienderId": {
          "type": "string",
          "format": "int64"
        },
        "friendeeId": {
          "type": "string",
          "format": "int64"
        },
        "friendedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbFriendRequest": {
      "type": "object",
      "properties": {
        "friendshipId": {
          "type": "string",
          "format": "int64"
        },
        "frienderId": {
          "type": "string",
          "format": "int64"
        },
        "frienderUsername": {
          "type": "string"
        },
        "friendedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbGame": {
      "type": "object",
      "properties": {
        "gameId": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "createdBy": {
          "type": "string",
          "format": "int64"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbGetPlayerGameResponse": {
      "type": "object",
      "properties": {
        "player": {
          "$ref": "#/definitions/pbPlayerGame"
        }
      }
    },
    "pbGetPlayerHandResponse": {
      "type": "object",
      "properties": {
        "playerHand": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbPlayerHand"
          }
        }
      }
    },
    "pbInvitePlayerToGameRequest": {
      "type": "object",
      "properties": {
        "inviterPlayerId": {
          "type": "string",
          "format": "int64"
        },
        "inviteeUsername": {
          "type": "string"
        },
        "gameId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pbListFriendRequestsResponse": {
      "type": "object",
      "properties": {
        "friendRequests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbFriendRequest"
          }
        }
      }
    },
    "pbListGamePlayersResponse": {
      "type": "object",
      "properties": {
        "players": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbPlayerGame"
          }
        }
      }
    },
    "pbListUserFriendsRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64",
          "title": "The user ID for whom to list friends"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum number of friendships to return"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "title": "Offset for pagination"
        }
      },
      "title": "Request for listing user friendships"
    },
    "pbListUserFriendsResponse": {
      "type": "object",
      "properties": {
        "friendships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbFriend"
          },
          "title": "List of friendships"
        }
      },
      "title": "Response for listing user friendships"
    },
    "pbLoginUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "pbLoginUserResponse": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        },
        "accessTokenExpiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "refreshToken": {
          "type": "string"
        },
        "refreshTokenExpiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/pbUser"
        }
      }
    },
    "pbLogoutRequest": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        }
      }
    },
    "pbPlayDessertRequest": {
      "type": "object",
      "properties": {
        "playerGameId": {
          "type": "string",
          "format": "int64"
        },
        "dessertName": {
          "type": "string"
        },
        "cardIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "pbPlayDessertResponse": {
      "type": "object",
      "properties": {
        "dessertPlayedId": {
          "type": "string",
          "format": "int64"
        },
        "playerGame": {
          "$ref": "#/definitions/pbPlayerGame"
        },
        "gameOver": {
          "type": "boolean"
        }
      }
    },
    "pbPlayerGame": {
      "type": "object",
      "properties": {
        "playerGame": {
          "type": "string",
          "format": "int64"
        },
        "playerId": {
          "type": "string",
          "format": "int64"
        },
        "gameId": {
          "type": "string",
          "format": "int64"
        },
        "playerScore": {
          "type": "integer",
          "format": "int32"
        },
        "playerStatus": {
          "type": "string"
        }
      }
    },
    "pbPlayerHand": {
      "type": "object",
      "properties": {
        "playerHandId": {
          "type": "string",
          "format": "int64"
        },
        "playerGameId": {
          "type": "string",
          "format": "int64"
        },
        "cardId": {
          "type": "string",
          "format": "int64"
        },
        "cardName": {
          "type": "string"
        }
      }
    },
    "pbStartGameRequest": {
      "type": "object",
      "properties": {
        "creatorId": {
          "type": "string",
          "format": "int64"
        },
        "gameId": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pbStartGameResponse": {
      "type": "object",
      "properties": {
        "game": {
          "$ref": "#/definitions/pbGame"
        }
      }
    },
    "pbUpdateUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "pbUpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/pbUser"
        }
      }
    },
    "pbUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "passwordChangedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}

syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_create_user.proto";
import "rpc_login_user.proto";
import "rpc_logout.proto";
import "rpc_check_session.proto";
import "rpc_update_user.proto";
import "rpc_create_friendship.proto";
import "rpc_list_user_friendships.proto";
import "rpc_list_friend_requests.proto";
import "rpc_accept_friend_request.proto";
import "rpc_create_game.proto";
import "rpc_invite_player_to_game.proto";
import "rpc_accept_game_invite.proto";
// import "rpc_add_player_to_game.proto";
import "rpc_list_game_players.proto";
import "rpc_get_player_game.proto";
import "rpc_start_game.proto";
import "rpc_get_player_hand.proto";
import "rpc_play_dessert.proto";
import "rpc_draw_card.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/PlatosCodes/desserted/backend/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Desserted API";
    version: "1.0";
    contact: {
      name: "Alex Merola";
      url: "https://github.com/PlatosCodes";
      email: "codingplato@gmail.com";
    };
  };
};

service Desserted {
      // Creates a new user
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {    
            post: "/v1/create_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to create a new user";
          summary: "Create new user";
        };
    };
    // Logs in a user
    rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
        option (google.api.http) = {    
            post: "/v1/login_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to login a user";
          summary: "Login a user";
        };
    };
    // Logs out a user
    rpc Logout (LogoutRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
          post: "/v1/logout"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to logout a user";
        summary: "Logout a user";
      };
    };
    rpc CheckUserSession (CheckUserSessionRequest) returns (CheckUserSessionResponse) {
      option (google.api.http) = {
          post: "/v1/check_session"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to check session for a user";
        summary: "Check user session";
      };
    };
    // Updates a user's password
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
      option (google.api.http) = {    
          patch: "/v1/update_user"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to update a user";
        summary: "Update a user";
      };
    };
    rpc CreateFriendship (CreateFriendshipRequest) returns (CreateFriendshipResponse) {
      option (google.api.http) = {    
          post: "/v1/create_friendship"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to create a new friendship";
        summary: "Create new friendship";
      };
    };
    rpc ListUserFriends (ListUserFriendsRequest) returns (ListUserFriendsResponse) {
      option (google.api.http) = {    
          post: "/v1/list_user_friends"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to list a user's friends";
        summary: "List a user's friends";
      };
    };
    rpc ListFriendRequests (ListFriendRequestsRequest) returns (ListFriendRequestsResponse) {
      option (google.api.http) = {
          get: "/v1/list_friend_requests/{user_id}"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to list a user's pending friend requests";
        summary: "List a user's friend requests";
      };
    };
    rpc AcceptFriendRequest (AcceptFriendRequestRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/accept_friend_request"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to accept a friend request";
          summary: "Accept a friend request";
        };
    };
    rpc CreateGame (CreateGameRequest) returns (CreateGameResponse) {
      option (google.api.http) = {    
          post: "/v1/create_game"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to create a new game";
        summary: "Create new game";
      };
    };
    rpc InvitePlayerToGame (InvitePlayerToGameRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {    
          post: "/v1/invite_player_to_game"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to invite a player to the game";
        summary: "Invite player to the game";
      };
    };   
    rpc AcceptGameInvite (AcceptGameInviteRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {    
          post: "/v1/accept_game_invite"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to accept an invitation to a game";
        summary: "Accept invite the game";
      };
    };   
    // rpc AddPlayerToGame (AddPlayerToGameRequest) returns (google.protobuf.Empty) {
    //   option (google.api.http) = {    
    //       post: "/v1/add_player_to_game"
    //       body: "*"
    //   };
    //   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //     description: "Use this API to add player to the game";
    //     summary: "Add player to the game";
    //   };
    // };   
    rpc ListGamePlayers (ListGamePlayersRequest) returns (ListGamePlayersResponse) {
      option (google.api.http) = {    
          get: "/v1/list_game_players"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to list the players of the game";
        summary: "List the game's players";
      };
    };      
    rpc GetPlayerGame (GetPlayerGameRequest) returns (GetPlayerGameResponse) {
      option (google.api.http) = {    
          get: "/v1/get_player_game/{player_game_id}"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to get data for a player's game";
        summary: "Get the player's game data";
      };
    };      
    rpc StartGame (StartGameRequest) returns (StartGameResponse) {
      option (google.api.http) = {    
          post: "/v1/start_game"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to start a game";
        summary: "Start the game";
      };
    };   
    rpc GetPlayerHand (GetPlayerHandRequest) returns (GetPlayerHandResponse) {
      option (google.api.http) = {    
          get: "/v1/get_player_hand"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to get a player's hand";
        summary: "Get the player's hand";
      };
    };
    rpc PlayDessert (PlayDessertRequest) returns (PlayDessertResponse) {
      option (google.api.http) = {    
          post: "/v1/play_dessert"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to play a dessert";
        summary: "Play a dessert";
      };
    };
    rpc DrawCard (DrawCardRequest) returns (DrawCardResponse) {
      option (google.api.http) = {    
          post: "/v1/draw_card"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to draw a card";
        summary: "Draw a card";
      };
    };
}

and my frontend so far: